import React, { useState, useRef } from 'react';
import { Camera, Upload, AlertTriangle, CheckCircle, XCircle, Clock, FileText } from 'lucide-react';

const IntelligentJHSASystem = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [responses, setResponses] = useState({});
  const [photos, setPhotos] = useState({});
  const [analysis, setAnalysis] = useState(null);
  const [loading, setLoading] = useState(false);
  const fileInputRef = useRef(null);

  // AI-Optimized JHSA Questions from our analysis
  const jhsaQuestions = [
    {
      id: "fall_protection_elevated_work",
      title: "Fall Protection - Elevated Work",
      regulatory: ["OSHA 1926.501", "OSHA 1926.502", "OSHA 1926.503"],
      riskVectors: ["Fall/Slip/Trip", "Mechanical Failure", "Human Error"],
      fields: [
        { name: "work_height", label: "Work Height (feet)", type: "number", required: true },
        { name: "surface_conditions", label: "Surface Conditions", type: "textarea", placeholder: "Describe walking surface stability, material, weather exposure..." },
        { name: "equipment_present", label: "Fall Protection Equipment", type: "textarea", placeholder: "List scaffolding, ladders, lifts, harnesses, guardrails..." },
        { name: "weather_conditions", label: "Weather Conditions", type: "text", placeholder: "Wind speed, precipitation, temperature..." }
      ]
    },
    {
      id: "electrical_hazard_power_tools",
      title: "Electrical Hazards - Power Tools",
      regulatory: ["OSHA 1926.95", "OSHA 1926.416", "OSHA 1926.417"],
      riskVectors: ["Electrical Shock", "Electrical Fire", "Mechanical Injury"],
      fields: [
        { name: "power_source", label: "Power Source Details", type: "text", placeholder: "Voltage, amperage, power supply type..." },
        { name: "wet_conditions", label: "Moisture Assessment", type: "textarea", placeholder: "Describe any wet conditions, humidity, water sources..." },
        { name: "grounding_system", label: "GFCI Protection", type: "select", options: ["Yes - GFCI Protected", "No - No GFCI", "Unknown"] },
        { name: "tool_condition", label: "Tool Condition", type: "textarea", placeholder: "Cord integrity, housing damage, inspection dates..." }
      ]
    },
    {
      id: "excavation_trench_safety",
      title: "Excavation & Trench Safety",
      regulatory: ["OSHA 1926.650", "OSHA 1926.651", "OSHA 1926.652"],
      riskVectors: ["Excavation Collapse", "Struck By", "Chemical Exposure"],
      fields: [
        { name: "soil_type", label: "Soil Classification", type: "select", options: ["Type A - Cohesive", "Type B - Cohesive", "Type C - Granular", "Rock", "Unknown"] },
        { name: "excavation_depth", label: "Excavation Depth (feet)", type: "number", required: true },
        { name: "water_presence", label: "Water Conditions", type: "textarea", placeholder: "Groundwater, surface water, drainage..." },
        { name: "adjacent_loads", label: "Adjacent Loads", type: "textarea", placeholder: "Equipment, materials, structures nearby..." }
      ]
    }
  ];

  const handleInputChange = (questionId, fieldName, value) => {
    setResponses(prev => ({
      ...prev,
      [questionId]: {
        ...prev[questionId],
        [fieldName]: value
      }
    }));
  };

  const handlePhotoUpload = (event, questionId) => {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setPhotos(prev => ({
          ...prev,
          [questionId]: {
            file: file,
            preview: e.target.result,
            description: ""
          }
        }));
      };
      reader.readAsDataURL(file);
    }
  };

  const analyzeWithGemini = async () => {
    setLoading(true);
    
    try {
      // Simulate Gemini API call with our structured prompt
      const currentQ = jhsaQuestions[currentQuestion];
      const currentResponse = responses[currentQ.id] || {};
      const currentPhoto = photos[currentQ.id];
      
      const analysisData = {
        regulatory_standards: currentQ.regulatory,
        environmental_factors: Object.entries(currentResponse).map(([key, value]) => `${key}: ${value}`).join(', '),
        photo_descriptions: currentPhoto ? "Photo uploaded for visual verification" : "No photo provided",
        text_context: currentResponse.surface_conditions || currentResponse.wet_conditions || currentResponse.water_presence || "No detailed context provided",
        quantitative_data: `Height: ${currentResponse.work_height || 'N/A'} feet, Depth: ${currentResponse.excavation_depth || 'N/A'} feet`
      };

      // Simulate Gemini analysis response
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const mockAnalysis = {
        compliance_status: currentResponse.work_height > 6 ? "requires_attention" : "compliant",
        risk_level: currentResponse.work_height > 20 ? "high" : "moderate",
        specific_violations: currentResponse.work_height > 6 && !currentResponse.equipment_present?.includes("harness") 
          ? ["OSHA 1926.501(b)(1) - Fall protection required at 6 feet"] 
          : [],
        immediate_hazards: currentResponse.work_height > 20 && !currentResponse.equipment_present?.includes("guardrail")
          ? ["Unprotected elevated work surface"] 
          : [],
        corrective_actions: [
          {
            action: "Install guardrail system or personal fall arrest system",
            priority: "immediate",
            osha_standard: "OSHA 1926.501",
            implementation_timeframe: "Before work continues"
          }
        ],
        additional_recommendations: [
          "Conduct fall protection training",
          "Implement daily equipment inspection protocol",
          "Establish rescue procedures"
        ],
        insurance_risk_factors: [
          "Elevated work without adequate protection",
          "Potential for serious injury claims"
        ]
      };

      setAnalysis(mockAnalysis);
      
    } catch (error) {
      console.error('Analysis error:', error);
    } finally {
      setLoading(false);
    }
  };

  const getRiskColor = (level) => {
    switch(level) {
      case 'low': return 'text-green-600';
      case 'moderate': return 'text-yellow-600';
      case 'high': return 'text-orange-600';
      case 'critical': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  const getComplianceIcon = (status) => {
    switch(status) {
      case 'compliant': return <CheckCircle className="w-5 h-5 text-green-600" />;
      case 'non_compliant': return <XCircle className="w-5 h-5 text-red-600" />;
      case 'requires_attention': return <AlertTriangle className="w-5 h-5 text-yellow-600" />;
      default: return <Clock className="w-5 h-5 text-gray-600" />;
    }
  };

  const currentQ = jhsaQuestions[currentQuestion];

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">Intelligent JHSA Safety Analysis</h1>
        <p className="text-gray-600">AI-powered Job Hazard Safety Analysis with OSHA compliance verification</p>
      </div>

      {/* Progress Bar */}
      <div className="mb-8">
        <div className="flex justify-between items-center mb-2">
          <span className="text-sm font-medium text-gray-700">Progress</span>
          <span className="text-sm text-gray-500">{currentQuestion + 1} of {jhsaQuestions.length}</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2">
          <div 
            className="bg-blue-600 h-2 rounded-full transition-all duration-300"
            style={{ width: `${((currentQuestion + 1) / jhsaQuestions.length) * 100}%` }}
          ></div>
        </div>
      </div>

      {/* Current Question */}
      <div className="bg-gray-50 rounded-lg p-6 mb-6">
        <div className="mb-4">
          <h2 className="text-xl font-semibold text-gray-900 mb-2">{currentQ.title}</h2>
          <div className="flex flex-wrap gap-2 mb-3">
            {currentQ.regulatory.map((reg, idx) => (
              <span key={idx} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">{reg}</span>
            ))}
          </div>
          <div className="flex flex-wrap gap-2">
            {currentQ.riskVectors.map((risk, idx) => (
              <span key={idx} className="px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded">{risk}</span>
            ))}
          </div>
        </div>

        {/* Form Fields */}
        <div className="space-y-4 mb-6">
          {currentQ.fields.map((field, idx) => (
            <div key={idx}>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                {field.label} {field.required && <span className="text-red-500">*</span>}
              </label>
              {field.type === 'textarea' ? (
                <textarea
                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  rows="3"
                  placeholder={field.placeholder}
                  value={responses[currentQ.id]?.[field.name] || ''}
                  onChange={(e) => handleInputChange(currentQ.id, field.name, e.target.value)}
                />
              ) : field.type === 'select' ? (
                <select
                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  value={responses[currentQ.id]?.[field.name] || ''}
                  onChange={(e) => handleInputChange(currentQ.id, field.name, e.target.value)}
                >
                  <option value="">Select an option</option>
                  {field.options.map((option, optIdx) => (
                    <option key={optIdx} value={option}>{option}</option>
                  ))}
                </select>
              ) : (
                <input
                  type={field.type}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder={field.placeholder}
                  value={responses[currentQ.id]?.[field.name] || ''}
                  onChange={(e) => handleInputChange(currentQ.id, field.name, e.target.value)}
                />
              )}
            </div>
          ))}
        </div>

        {/* Photo Upload */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-2">Visual Verification</label>
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-4">
            {photos[currentQ.id] ? (
              <div className="flex items-center space-x-4">
                <img 
                  src={photos[currentQ.id].preview} 
                  alt="Uploaded" 
                  className="w-20 h-20 object-cover rounded"
                />
                <div className="flex-1">
                  <p className="text-sm text-gray-600">Photo uploaded successfully</p>
                  <button
                    onClick={() => fileInputRef.current?.click()}
                    className="text-blue-600 text-sm hover:underline"
                  >
                    Change photo
                  </button>
                </div>
              </div>
            ) : (
              <div className="text-center">
                <Camera className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                <p className="text-sm text-gray-600 mb-2">Upload photo for AI visual analysis</p>
                <button
                  onClick={() => fileInputRef.current?.click()}
                  className="inline-flex items-center px-3 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                >
                  <Upload className="w-4 h-4 mr-2" />
                  Choose File
                </button>
              </div>
            )}
            <input
              ref={fileInputRef}
              type="file"
              accept="image/*"
              onChange={(e) => handlePhotoUpload(e, currentQ.id)}
              className="hidden"
            />
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex justify-between">
          <button
            onClick={() => setCurrentQuestion(Math.max(0, currentQuestion - 1))}
            disabled={currentQuestion === 0}
            className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
          >
            Previous
          </button>
          
          <button
            onClick={analyzeWithGemini}
            disabled={loading}
            className="px-6 py-2 bg-blue-600 text-white rounded-md text-sm font-medium hover:bg-blue-700 disabled:opacity-50"
          >
            {loading ? 'Analyzing...' : 'Analyze with AI'}
          </button>

          <button
            onClick={() => setCurrentQuestion(Math.min(jhsaQuestions.length - 1, currentQuestion + 1))}
            disabled={currentQuestion === jhsaQuestions.length - 1}
            className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
          >
            Next
          </button>
        </div>
      </div>

      {/* AI Analysis Results */}
      {analysis && (
        <div className="bg-white border border-gray-200 rounded-lg p-6">
          <div className="flex items-center mb-4">
            <FileText className="w-6 h-6 text-blue-600 mr-2" />
            <h3 className="text-lg font-semibold text-gray-900">AI Safety Analysis Results</h3>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div className="flex items-center">
              {getComplianceIcon(analysis.compliance_status)}
              <span className="ml-2 text-sm font-medium">
                Compliance: {analysis.compliance_status.replace('_', ' ').toUpperCase()}
              </span>
            </div>
            <div className="flex items-center">
              <AlertTriangle className={`w-5 h-5 mr-2 ${getRiskColor(analysis.risk_level)}`} />
              <span className="text-sm font-medium">
                Risk Level: <span className={getRiskColor(analysis.risk_level)}>{analysis.risk_level.toUpperCase()}</span>
              </span>
            </div>
          </div>

          {analysis.specific_violations.length > 0 && (
            <div className="mb-4">
              <h4 className="font-medium text-red-600 mb-2">OSHA Violations Identified:</h4>
              <ul className="list-disc list-inside text-sm text-red-700 space-y-1">
                {analysis.specific_violations.map((violation, idx) => (
                  <li key={idx}>{violation}</li>
                ))}
              </ul>
            </div>
          )}

          {analysis.immediate_hazards.length > 0 && (
            <div className="mb-4">
              <h4 className="font-medium text-orange-600 mb-2">Immediate Hazards:</h4>
              <ul className="list-disc list-inside text-sm text-orange-700 space-y-1">
                {analysis.immediate_hazards.map((hazard, idx) => (
                  <li key={idx}>{hazard}</li>
                ))}
              </ul>
            </div>
          )}

          <div className="mb-4">
            <h4 className="font-medium text-gray-900 mb-2">Required Corrective Actions:</h4>
            <div className="space-y-2">
              {analysis.corrective_actions.map((action, idx) => (
                <div key={idx} className="p-3 bg-gray-50 rounded border-l-4 border-blue-500">
                  <div className="flex justify-between items-start mb-1">
                    <span className="font-medium text-sm">{action.action}</span>
                    <span className={`px-2 py-1 rounded text-xs ${
                      action.priority === 'immediate' ? 'bg-red-100 text-red-800' :
                      action.priority === 'high' ? 'bg-orange-100 text-orange-800' :
                      'bg-yellow-100 text-yellow-800'
                    }`}>
                      {action.priority.toUpperCase()}
                    </span>
                  </div>
                  <div className="text-xs text-gray-600">
                    <span className="font-medium">{action.osha_standard}</span> • {action.implementation_timeframe}
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="mb-4">
            <h4 className="font-medium text-green-700 mb-2">Additional Recommendations:</h4>
            <ul className="list-disc list-inside text-sm text-green-700 space-y-1">
              {analysis.additional_recommendations.map((rec, idx) => (
                <li key={idx}>{rec}</li>
              ))}
            </ul>
          </div>

          <div>
            <h4 className="font-medium text-purple-700 mb-2">Insurance Risk Factors:</h4>
            <ul className="list-disc list-inside text-sm text-purple-700 space-y-1">
              {analysis.insurance_risk_factors.map((factor, idx) => (
                <li key={idx}>{factor}</li>
              ))}
            </ul>
          </div>
        </div>
      )}
    </div>
  );
};

export default IntelligentJHSASystem;