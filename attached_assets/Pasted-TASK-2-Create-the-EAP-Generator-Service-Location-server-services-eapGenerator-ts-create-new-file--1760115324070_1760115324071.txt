TASK 2: Create the EAP Generator Service
Location: server/services/eapGenerator.ts (create new file)
Structure: Use the same multi-agent pattern from multiAgentSafety.ts, but adapted for document generation instead of analysis.
typescriptimport { GoogleGenerativeAI } from '@google/generative-ai';
import dotenv from 'dotenv';
import {
  EAPQuestionnaire,
  EAPValidation,
  EmergencyClassification,
  EmergencyProcedure,
  GeneratedEAP
} from '../types/eap.types.js';

dotenv.config();

const gemini = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

export class EAPGeneratorService {
  private model;

  constructor() {
    this.model = gemini.getGenerativeModel({
      model: 'gemini-2.5-flash',
    });
  }

  /**
   * Main entry point - orchestrates 4-agent EAP generation pipeline
   */
  async generateEAP(questionnaire: EAPQuestionnaire): Promise<GeneratedEAP> {
    try {
      console.log('üìù Starting EAP generation pipeline...');

      // AGENT 1: Validate questionnaire data (Temperature 0.3 - precise)
      console.log('‚úÖ Agent 1: Validating questionnaire data...');
      const validation = await this.validateQuestionnaire(questionnaire);
      console.log(`‚úì Validation complete: ${validation.readyToGenerate ? 'Ready' : 'Incomplete'}`);

      if (!validation.readyToGenerate) {
        throw new Error(`Incomplete questionnaire: ${validation.missingRequired.join(', ')}`);
      }

      // AGENT 2: Classify required emergencies (Temperature 0.5 - analytical)
      console.log('üîç Agent 2: Classifying required emergency procedures...');
      const classification = await this.classifyEmergencies(questionnaire);
      console.log(`‚úì Identified ${classification.requiredEmergencies.length} required emergency procedures`);

      // AGENT 3: Generate procedures for each emergency (Temperature 0.7 - detailed)
      console.log('üìã Agent 3: Generating site-specific procedures...');
      const procedures: EmergencyProcedure[] = [];
      for (const emergency of classification.requiredEmergencies) {
        console.log(`  Writing procedure: ${emergency.type}...`);
        const procedure = await this.generateProcedure(questionnaire, emergency);
        procedures.push(procedure);
      }
      console.log(`‚úì Generated ${procedures.length} procedures`);

      // AGENT 4: Assemble final document (Temperature 0.3 - structured)
      console.log('üìÑ Agent 4: Assembling OSHA-compliant document...');
      const eapDocument = await this.assembleDocument(
        questionnaire,
        validation,
        classification,
        procedures
      );
      console.log('‚úì EAP generation complete!');

      return eapDocument;

    } catch (error) {
      console.error('‚ùå EAP generation error:', error);
      throw error;
    }
  }

  /**
   * AGENT 1: Validate questionnaire data
   * Temperature: 0.3 (precise validation)
   */
  private async validateQuestionnaire(q: EAPQuestionnaire): Promise<EAPValidation> {
    const prompt = `You are an OSHA compliance specialist validating Emergency Action Plan questionnaire data.

INPUT QUESTIONNAIRE:
${JSON.stringify(q, null, 2)}

VALIDATION REQUIREMENTS:
1. Check MANDATORY fields per OSHA 1926.35:
   - Company name and site address
   - Emergency coordinator with contact info
   - Assembly area locations
   - Emergency contact numbers
   - At least one alarm system

2. Check HAZARD-EQUIPMENT alignment:
   - If fallFromHeight=true, need rescue capability defined
   - If craneOperations=true, need crane in equipment list
   - If confinedSpace=true, need rescue plan
   - If hazardousMaterials=true, need spill response info

3. Check LOGICAL consistency:
   - If buildingHeight >30ft, should have fallFromHeight=true
   - If swingStage equipment listed, should have swingStage hazard=true
   - Hospital distance should be reasonable (<50 miles)

4. Identify WARNINGS (not blockers but should mention):
   - No alternate coordinator
   - No trained rescuers for high-risk work
   - Missing GPS coordinates for assembly areas
   - No radio channel specified

OUTPUT REQUIREMENTS:
Respond with ONLY valid JSON, no other text:

{
  "complete": <true|false>,
  "missingRequired": ["field1", "field2"],
  "warnings": ["warning1", "warning2"],
  "hazardEquipmentMismatches": ["mismatch1"],
  "readyToGenerate": <true|false>
}`;

    try {
      const result = await this.callGemini(prompt, 0.3, 1500);
      const parsed = JSON.parse(this.extractJSON(result));
      return parsed;
    } catch (error) {
      console.error('Agent 1 validation error:', error);
      // Fallback validation
      return {
        complete: false,
        missingRequired: ['Validation failed - check required fields'],
        warnings: [],
        hazardEquipmentMismatches: [],
        readyToGenerate: false
      };
    }
  }

  /**
   * AGENT 2: Classify required emergency procedures
   * Temperature: 0.5 (analytical classification)
   */
  private async classifyEmergencies(q: EAPQuestionnaire): Promise<EmergencyClassification> {
    const prompt = `You are an OSHA emergency planning specialist. Determine which emergency procedures are REQUIRED for this site.

SITE CHARACTERISTICS:
- Company: ${q.companyName}
- Site Type: ${q.siteType}
- Building Height: ${q.buildingHeight || 'N/A'} feet
- Work Elevation: ${q.workElevation || 'N/A'} feet
- Project: ${q.projectDescription}
- Construction Phase: ${q.constructionPhase || 'N/A'}

HAZARDS PRESENT:
${JSON.stringify(q.hazards, null, 2)}

EQUIPMENT IN USE:
${q.equipment.join(', ')}

WEATHER CONCERNS:
${q.weatherConcerns.join(', ')}

CLASSIFICATION RULES:
ALWAYS REQUIRED (every EAP must have):
- Fire emergency
- Medical emergency
- General evacuation

CONDITIONALLY REQUIRED:
- Fall from height rescue: IF buildingHeight >6ft OR workElevation >6ft OR fallFromHeight=true OR swingStage equipment present
- Confined space rescue: IF confinedSpace=true
- Crane emergency: IF craneOperations=true OR "crane" in equipment list
- Swing stage rescue: IF swingStage=true OR "swing stage" in equipment
- Tornado/severe weather: IF weatherConcerns includes tornado/severe storms
- Hazmat spill: IF hazardousMaterials=true
- Structural collapse: IF excavation=true OR demolition=true
- Electrical emergency: IF electricalHighVoltage=true
- Hot work fire watch: IF hotWork=true

PRIORITY LEVELS:
- CRITICAL: Could result in death if not addressed (fall rescue, confined space, crane)
- HIGH: Significant injury risk (electrical, hazmat, structural)
- MEDIUM: Important but lower immediate risk (weather, hot work)

OUTPUT REQUIREMENTS:
Respond with ONLY valid JSON:

{
  "requiredEmergencies": [
    {
      "type": "fall_from_height_rescue",
      "reason": "Work at 90 feet with swing stage operations",
      "oshaReference": "29 CFR 1926.502(d)(20)",
      "criticalDetails": ["6-minute rescue window", "Suspension trauma prevention"],
      "priority": "critical"
    }
  ],
  "optionalEmergencies": ["extreme_heat_protocol", "winter_weather"],
  "totalProcedures": 8
}`;

    try {
      const result = await this.callGemini(prompt, 0.5, 2000);
      const parsed = JSON.parse(this.extractJSON(result));
      return parsed;
    } catch (error) {
      console.error('Agent 2 classification error:', error);
      // Fallback: return minimum required emergencies
      return {
        requiredEmergencies: [
          {
            type: 'fire_emergency',
            reason: 'Required for all EAPs per OSHA 1926.35',
            oshaReference: '29 CFR 1926.35(b)',
            criticalDetails: ['Evacuation procedures', 'Fire extinguisher use'],
            priority: 'critical'
          },
          {
            type: 'medical_emergency',
            reason: 'Required for all EAPs per OSHA 1926.35',
            oshaReference: '29 CFR 1926.35(b)(4)',
            criticalDetails: ['First aid', 'EMS notification'],
            priority: 'critical'
          }
        ],
        optionalEmergencies: [],
        totalProcedures: 2
      };
    }
  }

  /**
   * AGENT 3: Generate specific emergency procedure
   * Temperature: 0.7 (detailed, site-specific)
   */
  private async generateProcedure(
    q: EAPQuestionnaire,
    emergency: RequiredEmergency
  ): Promise<EmergencyProcedure> {
    
    const prompt = `You are writing a site-specific emergency procedure for an OSHA-compliant Emergency Action Plan.

SITE INFORMATION:
Company: ${q.companyName}
Location: ${q.siteAddress}, ${q.city}, ${q.state}
Project: ${q.projectDescription}
Building: ${q.buildingType}
Height: ${q.buildingHeight || 'N/A'} feet
Workers: ${q.totalEmployees}

Emergency Coordinator: ${q.emergencyCoordinator.name} (${q.emergencyCoordinator.phone})
Assembly Point: ${q.primaryAssembly.location}
Nearest Hospital: ${q.nearestHospital.name} - ${q.nearestHospital.distance} miles (${q.nearestHospital.phone})
Fire Department: ${q.fireStation.phone}${q.fireStation.estimatedResponseTime ? ` - ${q.fireStation.estimatedResponseTime} min response` : ''}

Alarm Systems: ${q.alarmSystems.join(', ')}
Radio Channel: ${q.radioChannel || 'Not specified'}

EMERGENCY TYPE: ${emergency.type}
WHY REQUIRED: ${emergency.reason}
OSHA REFERENCE: ${emergency.oshaReference}
CRITICAL DETAILS: ${emergency.criticalDetails.join('; ')}

REQUIREMENTS FOR THIS PROCEDURE:
1. Use ACTUAL site details (real names, addresses, phone numbers, distances)
2. Write STEP-BY-STEP procedures with specific timings where critical
3. Include SITE-SPECIFIC challenges (wind, access, equipment locations)
4. Specify EXACT equipment and where it's located
5. Name SPECIFIC personnel with their roles
6. Include ALTERNATIVE plans if primary fails
7. Add VERIFICATION methods to ensure procedure works

WRITE IN THIS FORMAT:
**[EMERGENCY TYPE IN CAPS]**

**When This Applies:**
[Specific triggering conditions]

**Designated Personnel:**
- Primary: [Actual name from questionnaire] ([Role/Certification])
- Backup: [Name or "Site superintendent" if not specified]

**Equipment & Locations:**
[Specific equipment with exact locations on site]

**PROCEDURE STEPS:**
1. **Immediate (0-X seconds):** [First actions with timing]
   - [Specific action using actual site details]
   - [Who does what]

2. **[Next phase (X-Y seconds)]:** [Next actions]
   - [Specific steps]
   
[Continue with numbered, timed steps]

**Site-Specific Factors:**
- [Challenge 1 based on actual site: wind, access, terrain, etc.]
- [Challenge 2]
- [Mitigation for each]

**Alternative if Primary Plan Fails:**
[Backup plan using actual resources - fire department, etc.]

**Training Required:**
[What training workers need for this procedure]

**Verification:**
[How to test this procedure works]

OUTPUT REQUIREMENTS:
Respond with ONLY valid JSON:

{
  "emergencyType": "${emergency.type}",
  "title": "FALL FROM HEIGHT RESCUE PROCEDURE",
  "whenApplicable": "Any worker suspended in fall arrest system at 90-foot elevation",
  "procedureSteps": "[Full formatted procedure text as shown above - use \\n for line breaks]",
  "siteSpecificFactors": "Wind conditions at 90ft, swing stage access from north side, coordination with Fire Station 12",
  "equipmentNeeded": "Rescue kit (Tool Trailer #2), descent device, trauma straps",
  "trainingRequired": "Quarterly rescue drills, fall protection competent person certification",
  "oshaReference": "${emergency.oshaReference}"
}`;

    try {
      const result = await this.callGemini(prompt, 0.7, 3000);
      const parsed = JSON.parse(this.extractJSON(result));
      return parsed;
    } catch (error) {
      console.error(`Agent 3 procedure generation error for ${emergency.type}:`, error);
      // Fallback generic procedure
      return {
        emergencyType: emergency.type,
        title: emergency.type.replace(/_/g, ' ').toUpperCase(),
        whenApplicable: emergency.reason,
        procedureSteps: `[Generic procedure - AI generation failed. Manual completion required for ${emergency.type}]`,
        siteSpecificFactors: 'See site characteristics',
        equipmentNeeded: 'To be determined',
        trainingRequired: 'Per OSHA requirements',
        oshaReference: emergency.oshaReference
      };
    }
  }

  /**
   * AGENT 4: Assemble complete EAP document
   * Temperature: 0.3 (structured formatting)
   */
  private async assembleDocument(
    q: EAPQuestionnaire,
    validation: EAPValidation,
    classification: EmergencyClassification,
    procedures: EmergencyProcedure[]
  ): Promise<GeneratedEAP> {
    
    const now = new Date();
    const dateStr = now.toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });

    // Build each section using the data
    const coverPage = this.buildCoverPage(q, dateStr);
    const tableOfContents = this.buildTableOfContents();
    const section1 = this.buildSection1_Policy(q);
    const section2 = this.buildSection2_Responsibilities(q);
    const section3 = this.buildSection3_EmergencyReporting(q);
    const section4 = this.buildSection4_Evacuation(q);
    const section5 = this.buildSection5_Accounting(q);
    const section6 = this.buildSection6_CriticalOperations(q);
    const section7 = this.buildSection7_RescueMedical(q, procedures);
    const section8 = this.buildSection8_Contacts(q);
    const section9 = this.buildSection9_SpecificProcedures(procedures);
    const section10 = this.buildSection10_AlarmSystems(q);
    const section11 = this.buildSection11_Training(q);
    const section12 = this.buildSection12_Review(q);
    const attachments = this.buildAttachments(q);

    return {
      metadata: {
        generatedDate: now.toISOString(),
        companyName: q.companyName,
        siteAddress: `${q.siteAddress}, ${q.city}, ${q.state} ${q.zipCode}`,
        documentVersion: '1.0'
      },
      sections: {
        coverPage,
        tableOfContents,
        section1_policy: section1,
        section2_responsibilities: section2,
        section3_emergencyReporting: section3,
        section4_evacuation: section4,
        section5_accounting: section5,
        section6_criticalOperations: section6,
        section7_rescueMedical: section7,
        section8_contacts: section8,
        section9_specificProcedures: section9,
        section10_alarmSystems: section10,
        section11_training: section11,
        section12_review: section12,
        attachments
      },
      completeness: this.calculateCompleteness(validation, procedures),
      oshaCompliant: validation.readyToGenerate && procedures.length >= 2
    };
  }

  // Helper methods for building each section
  // (These are TypeScript methods that format the data - no AI needed)
  
  private buildCoverPage(q: EAPQuestionnaire, dateStr: string): string {
    return `
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
EMERGENCY ACTION PLAN
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

${q.companyName}
${q.projectDescription}

Site Location:
${q.siteAddress}
${q.city}, ${q.state} ${q.zipCode}

Date Created: ${dateStr}
Document Version: 1.0

Site Type: ${q.siteType === 'construction' ? 'Construction' : q.siteType === 'general_industry' ? 'General Industry' : 'Maritime'}
Building Type: ${q.buildingType}
${q.buildingHeight ? `Building Height: ${q.buildingHeight} feet` : ''}
${q.workElevation ? `Work Elevation: ${q.workElevation} feet` : ''}
Number of Workers: ${q.totalEmployees}

This Emergency Action Plan complies with OSHA Standard:
${q.siteType === 'construction' ? '29 CFR 1926.35' : '29 CFR 1910.38'}

Emergency Coordinator: ${q.emergencyCoordinator.name}
Phone: ${q.emergencyCoordinator.phone}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
`.trim();
  }

  private buildTableOfContents(): string {
    return `
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
TABLE OF CONTENTS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Section 1: Company Policy...............................Page 3
Section 2: Assignment of Responsibilities...............Page 4
Section 3: Emergency Reporting Procedures...............Page 5
Section 4: Evacuation Procedures........................Page 6
Section 5: Employee Accounting..........................Page 8
Section 6: Critical Operations Shutdown.................Page 9
Section 7: Rescue and Medical Duties....................Page 10
Section 8: Emergency Contact Information................Page 12
Section 9: Specific Emergency Procedures................Page 13
Section 10: Alarm Systems...............................Page 20
Section 11: Training Requirements.......................Page 21
Section 12: Plan Review and Updates.....................Page 22

Attachments:
- Appendix A: Evacuation Route Maps
- Appendix B: Training Roster
- Appendix C: Equipment Inspection Logs
- Appendix D: Coordination Letters

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
`.trim();
  }

  private buildSection1_Policy(q: EAPQuestionnaire): string {
    const oshaStandard = q.siteType === 'construction' ? '29 CFR 1926.35' : '29 CFR 1910.38';
    
    return `
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
SECTION 1: COMPANY POLICY
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

The objective of this Emergency Action Plan is to comply with the Occupational Safety and Health Administration's (OSHA) Emergency Action Plans Standard, ${oshaStandard}, and to prepare employees for dealing with emergency situations.

This plan is designed to minimize injury and loss of human life and company resources by training employees, procuring and maintaining necessary equipment, and assigning responsibilities.

This plan applies to all emergencies that may reasonably be expected to occur at ${q.companyName} operations located at ${q.siteAddress}, ${q.city}, ${q.state}.

**Scope of Coverage:**
This Emergency Action Plan covers ${q.totalEmployees} employees${q.constructionPhase ? ` working on ${q.constructionPhase}` : ''} at the ${q.buildingType}.

**Hazards Addressed:**
This plan specifically addresses the following hazards present at this site:
${Object.entries(q.hazards)
  .filter(([_, value]) => value === true)
  .map(([key]) => `- ${key.replace(/([A-Z])/g, ' $1').trim().replace(/^./, str => str.toUpperCase())}`)
  .join('\n')}

**Plan Availability:**
This Emergency Action Plan is:
- Posted at the main site entrance
- Available in the site office for employee review
- Discussed during new employee orientation
- Reviewed during monthly safety meetings

`.trim();
  }

  private buildSection2_Responsibilities(q: EAPQuestionnaire): string {
    return `
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
SECTION 2: ASSIGNMENT OF RESPONSIBILITIES
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**Emergency Coordinator:**
Name: ${q.emergencyCoordinator.name}
Title: ${q.emergencyCoordinator.title}
Phone: ${q.emergencyCoordinator.phone}
${q.emergencyCoordinator.email ? `Email: ${q.emergencyCoordinator.email}` : ''}

**Responsibilities:**
- Manage and maintain this Emergency Action Plan
- Coordinate with local emergency responders (fire, police, EMS)
- Maintain all training records
- Conduct emergency drills
- Authority to order evacuation or work stoppage
- Primary contact for emergency incidents

**Alternate Emergency Coordinator:**
Name: ${q.alternateCoordinator.name}
Title: ${q.alternateCoordinator.title}
Phone: ${q.alternateCoordinator.phone}
${q.alternateCoordinator.email ? `Email: ${q.alternateCoordinator.email}` : ''}

The Alternate Emergency Coordinator assumes all responsibilities when the Primary Emergency Coordinator is unavailable.

**Additional Contacts for Plan Information:**
Employees can contact the Emergency Coordinator or Alternate for questions about this plan, their responsibilities, or emergency procedures.

`.trim();
  }

  private buildSection3_EmergencyReporting(q: EAPQuestionnaire): string {
    return `
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
SECTION 3: EMERGENCY REPORTING PROCEDURES
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**Types of Emergencies to Report Immediately:**
- Fire or smoke
- Medical emergency or serious injury
- Fall from height or worker suspended in fall arrest
- Natural disaster (tornado, earthquake, flood)
- Hazardous material spill or release
- Structural instability or collapse
- Equipment failure (crane, aerial lift, etc.)
- Electrical emergency
- Workplace violence or active threat
- Any life-threatening situation

**How to Report an Emergency:**

**Step 1: Alert Others**
Use available alarm systems:
${q.alarmSystems.map(system => `- ${system}`).join('\n')}
${q.radioChannel ? `\n**Radio Protocol:** Broadcast "EMERGENCY - [type] at [location]" on ${q.radioChannel}` : ''}

**Step 2: Call for Help**
- **Life-threatening emergencies:** Call 911 FIRST
- **All emergencies:** Notify Emergency Coordinator: ${q.emergencyCoordinator.phone}

**Step 3: Provide Information**
When calling 911 or Emergency Coordinator, state:
1. Type of emergency (fire, medical, fall, etc.)
2. Exact location: ${q.siteAddress}, ${q.city}, ${q.state}
   - Building/area: ${q.buildingType}
   - Specific floor/location if known
3. Number of people involved/injured
4. Your name and callback number: ${q.radioChannel ? `(or radio ${q.radioChannel})` : ''}
5. Any immediate hazards (fire spreading, structural instability, etc.)

**Step 4: Meet Emergency Responders**
${q.siteAccessNotes ? `- Site Access: ${q.siteAccessNotes}\n` : ''}- Designated person will meet responders at main entrance to guide them
- Have site layout and emergency information ready

**DO NOT Hang Up** until emergency operator tells you to.

`.trim();
  }

  private buildSection4_Evacuation(q: EAPQuestionnaire): string {
    return `
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
SECTION 4: EVACUATION PROCEDURES
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**Assembly Areas:**

**Primary Assembly Point:**
${q.primaryAssembly.location}
${q.primaryAssembly.gpsCoordinates ? `GPS: ${q.primaryAssembly.gpsCoordinates}` : ''}

**Secondary Assembly Point:**
${q.secondaryAssembly.location}
${q.secondaryAssembly.gpsCoordinates ? `GPS: ${q.secondaryAssembly.gpsCoordinates}` : ''}

Use secondary assembly point if primary is unsafe or inaccessible.

**Evacuation Procedures:**

**When Evacuation is Ordered:**
1. **Stop work immediately** - Secure tools/equipment only if safe (< 30 seconds)
2. **Alert others** - Notify nearby workers of evacuation
3. **Close doors** - Close doors behind you (DO NOT LOCK)
4. **Use nearest safe exit** - Refer to posted evacuation maps
   - DO NOT USE ELEVATORS${q.buildingHeight && q.buildingHeight > 30 ? ' - Use stairs only' : ''}
5. **Assist others** - Help those who need assistance
6. **Proceed to assembly area** - Walk, do not run
7. **Report to supervisor** - Check in for head count
8. **Stay at assembly point** - DO NOT leave or re-enter until "All Clear"

**Evacuation Routes:**
[PLACEHOLDER: Attach site-specific evacuation route maps showing:
- All exit locations
- Primary and alternate routes from each area
- Assembly point locations
- Location of fire extinguishers and first aid stations]

**When to Evacuate:**
- Fire alarm activation
- Smoke or fire observed
- Structural inst