NSTRUCTIONS FOR CLAUDE OPUS 4.1 IN REPLIT - PHASE 2: WIRE UP EAP GENERATOR
Context: You just built the questionnaire form. Now we need to connect it to the EAP generation pipeline so when users submit the form, they get a downloadable OSHA-compliant Emergency Action Plan document.

TASK 1: Create the EAP Generator Service
Location: server/services/eapGenerator.ts (create new file)
Copy the ENTIRE service structure I provided earlier - the one with:

EAPGeneratorService class
generateEAP() main orchestrator
validateQuestionnaire() - Agent 1
classifyEmergencies() - Agent 2
generateProcedure() - Agent 3
assembleDocument() - Agent 4
All the helper methods (buildCoverPage, buildSection1_Policy, etc.)

IMPORTANT IMPLEMENTATION NOTES:

The helper methods (buildCoverPage, buildSection1_Policy, etc.) are TypeScript string template functions - they DON'T call AI. They just format the data into sections. I showed you the format for sections 1-4. Use that same pattern for sections 5-12.
Only Agents 1-3 call Gemini. Agent 4 (assembleDocument) just calls the helper methods and combines strings.
Use the existing Gemini helper methods from multiAgentSafety.ts:

typescript   private async callGemini(prompt: string, temperature: number, maxTokens: number): Promise<string>
   private extractJSON(text: string): string

Calculate completeness with this simple method:

typescript   private calculateCompleteness(validation: EAPValidation, procedures: EmergencyProcedure[]): number {
     let score = 0;
     if (validation.complete) score += 50;
     if (validation.missingRequired.length === 0) score += 20;
     if (procedures.length >= 3) score += 30;
     return Math.min(100, score);
   }

TASK 2: Create the EAP Route Handler
Location: server/routes/eap.routes.ts (create new file)
typescriptimport { Router } from 'express';
import { EAPGeneratorService } from '../services/eapGenerator.js';
import { EAPQuestionnaire } from '../types/eap.types.js';

const router = Router();
const eapGenerator = new EAPGeneratorService();

/**
 * Generate Emergency Action Plan from questionnaire
 * POST /api/eap/generate
 */
router.post('/generate', async (req, res) => {
  try {
    console.log('üìù EAP generation request received');
    
    // Extract questionnaire data from request
    // The form submits as checklist format, so we need to transform it
    const checklistData = req.body;
    
    // Transform checklist responses into EAPQuestionnaire format
    const questionnaire = transformChecklistToQuestionnaire(checklistData);
    
    // Generate the EAP document
    const eapDocument = await eapGenerator.generateEAP(questionnaire);
    
    // Return the generated document
    res.json({
      success: true,
      document: eapDocument,
      message: 'Emergency Action Plan generated successfully'
    });
    
  } catch (error: any) {
    console.error('‚ùå EAP generation error:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to generate EAP'
    });
  }
});

/**
 * Helper: Transform checklist format to EAPQuestionnaire
 */
function transformChecklistToQuestionnaire(checklistData: any): EAPQuestionnaire {
  // Extract responses by question ID
  const responses = new Map<string, string>();
  
  if (checklistData.sections) {
    checklistData.sections.forEach((section: any) => {
      section.items?.forEach((item: any) => {
        if (item.response) {
          responses.set(item.id, item.response);
        }
      });
    });
  }
  
  // Helper to get response
  const get = (id: string): string => responses.get(id) || '';
  const getBool = (id: string): boolean => responses.get(id)?.toLowerCase() === 'yes';
  const getNum = (id: string): number => parseInt(responses.get(id) || '0') || 0;
  
  // Build EAPQuestionnaire object
  return {
    companyName: get('eap-company-name'),
    siteAddress: get('eap-site-address'),
    city: get('eap-city'),
    state: get('eap-state'),
    zipCode: get('eap-zip'),
    siteType: (get('eap-site-type') || 'construction') as any,
    projectDescription: get('eap-project-description'),
    
    totalEmployees: getNum('eap-total-employees'),
    emergencyCoordinator: {
      name: get('eap-coordinator-name'),
      title: get('eap-coordinator-title'),
      phone: get('eap-coordinator-phone'),
      email: get('eap-coordinator-email')
    },
    alternateCoordinator: {
      name: get('eap-alt-coordinator-name'),
      title: get('eap-alt-coordinator-title'),
      phone: get('eap-alt-coordinator-phone'),
      email: get('eap-alt-coordinator-email')
    },
    
    buildingHeight: getNum('eap-building-height') || undefined,
    workElevation: getNum('eap-work-elevation') || undefined,
    buildingType: get('eap-building-type'),
    constructionPhase: get('eap-construction-phase') || undefined,
    
    hazards: {
      fallFromHeight: getBool('eap-hazard-fall'),
      confinedSpace: getBool('eap-hazard-confined'),
      craneOperations: getBool('eap-hazard-crane'),
      hotWork: getBool('eap-hazard-hotwork'),
      hazardousMaterials: getBool('eap-hazard-hazmat'),
      swingStage: getBool('eap-hazard-swingstage'),
      excavation: getBool('eap-hazard-excavation'),
      electricalHighVoltage: getBool('eap-hazard-electrical'),
      roofWork: getBool('eap-hazard-roof'),
      demolition: getBool('eap-hazard-demolition')
    },
    
    equipment: get('eap-equipment').split(',').map(e => e.trim()).filter(e => e),
    
    nearestHospital: {
      name: get('eap-hospital-name'),
      address: get('eap-hospital-address'),
      distance: getNum('eap-hospital-distance'),
      phone: get('eap-hospital-phone'),
      traumaLevel: get('eap-hospital-trauma') || undefined
    },
    fireStation: {
      district: get('eap-fire-district') || undefined,
      phone: get('eap-fire-phone'),
      estimatedResponseTime: getNum('eap-fire-response') || undefined
    },
    localPolice: {
      jurisdiction: get('eap-police-jurisdiction'),
      phone: get('eap-police-phone')
    },
    
    primaryAssembly: {
      location: get('eap-assembly-primary'),
      gpsCoordinates: get('eap-assembly-primary-gps') || undefined
    },
    secondaryAssembly: {
      location: get('eap-assembly-secondary'),
      gpsCoordinates: get('eap-assembly-secondary-gps') || undefined
    },
    
    weatherConcerns: get('eap-weather-concerns').split(',').map(w => w.trim()).filter(w => w),
    siteAccessNotes: get('eap-site-access') || undefined,
    nearbyHazards: get('eap-nearby-hazards') || undefined,
    
    rescueOption: (get('eap-rescue-option') || 'local_fire_ems') as any,
    trainedRescuers: undefined, // TODO: Parse if rescue option is trained_employees
    
    alarmSystems: get('eap-alarm-systems').split(',').map(a => a.trim()).filter(a => a),
    radioChannel: get('eap-radio-channel') || undefined,
    
    additionalInfo: get('eap-additional-info') || undefined
  };
}

export default router;

TASK 3: Register the Route
Location: server/index.ts (or wherever routes are registered)
Add these lines:
typescriptimport eapRoutes from './routes/eap.routes.js';

// ... other route registrations ...

app.use('/api/eap', eapRoutes);

TASK 4: Test Endpoint
After implementing, test with:
bashcurl -X POST http://localhost:5000/api/eap/generate \
  -H "Content-Type: application/json" \
  -d '{
    "templateId": "emergency-action-plan",
    "sections": [{
      "items": [
        {"id": "eap-company-name", "response": "Acme Glass LLC"},
        {"id": "eap-site-address", "response": "123 Main St"},
        {"id": "eap-city", "response": "Indianapolis"},
        {"id": "eap-state", "response": "IN"},
        {"id": "eap-total-employees", "response": "12"},
        {"id": "eap-coordinator-name", "response": "John Smith"},
        {"id": "eap-coordinator-phone", "response": "317-555-0100"},
        {"id": "eap-building-height", "response": "90"},
        {"id": "eap-hazard-fall", "response": "yes"}
      ]
    }]
  }'

DELIVERABLES:

‚úÖ server/services/eapGenerator.ts - Complete 4-agent service
‚úÖ server/routes/eap.routes.ts - Route handler with transformation logic
‚úÖ Route registered in server/index.ts
‚úÖ Test endpoint works and returns generated EAP

Show me:

The first 100 lines of the generated EAP document
The console logs showing all 4 agents executing
Confirmation that it works end-to-end

Once this works, we'll add PDF/DOCX export in Phase 3.