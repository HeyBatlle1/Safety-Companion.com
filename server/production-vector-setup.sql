-- PRODUCTION VECTOR EMBEDDINGS SETUP
-- SAFE IMPLEMENTATION - Adds capabilities without breaking existing system

-- Step 1: Enable pgvector extension (if not already enabled)
CREATE EXTENSION IF NOT EXISTS vector;

-- Step 2: Add embedding column to existing osha_regulations table
-- This is SAFE - adds new column without affecting existing data
ALTER TABLE osha_regulations 
ADD COLUMN IF NOT EXISTS embedding vector(768);

-- Step 3: Create vector similarity index for performance
-- This dramatically improves search speed for large datasets
CREATE INDEX IF NOT EXISTS osha_regulations_embedding_idx 
ON osha_regulations 
USING ivfflat (embedding vector_cosine_ops) 
WITH (lists = 100);

-- Step 4: Create semantic search function
CREATE OR REPLACE FUNCTION search_regulations_semantic(
  query_embedding vector(768),
  similarity_threshold float DEFAULT 0.5,
  max_results int DEFAULT 10
)
RETURNS TABLE (
  regulation_id text,
  title text,
  description text,
  similarity_score float
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    id::text,
    title,
    description,
    (1 - (embedding <=> query_embedding)) as similarity_score
  FROM osha_regulations
  WHERE embedding IS NOT NULL
    AND (1 - (embedding <=> query_embedding)) > similarity_threshold
  ORDER BY embedding <=> query_embedding
  LIMIT max_results;
END;
$$ LANGUAGE plpgsql;

-- Step 5: Add embedding generation tracking
CREATE TABLE IF NOT EXISTS embedding_generation_log (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  regulation_id text REFERENCES osha_regulations(id),
  generated_at timestamp DEFAULT now(),
  generation_time_ms integer,
  success boolean DEFAULT true,
  error_message text
);

-- Step 6: Create background embedding update function
CREATE OR REPLACE FUNCTION update_regulation_embeddings()
RETURNS void AS $$
DECLARE
  reg_record RECORD;
  start_time timestamp;
  end_time timestamp;
BEGIN
  -- Process regulations that don't have embeddings yet
  FOR reg_record IN 
    SELECT id, title, description 
    FROM osha_regulations 
    WHERE embedding IS NULL 
    LIMIT 10  -- Process in small batches to avoid overwhelming the system
  LOOP
    start_time := now();
    
    -- This will be called by the application layer with actual embeddings
    -- Placeholder for now - embeddings generated by Gemini API
    
    end_time := now();
    
    INSERT INTO embedding_generation_log (
      regulation_id, 
      generated_at, 
      generation_time_ms
    ) VALUES (
      reg_record.id,
      end_time,
      EXTRACT(MILLISECONDS FROM (end_time - start_time))::integer
    );
  END LOOP;
END;
$$ LANGUAGE plpgsql;

-- Step 7: Add semantic search performance tracking
CREATE TABLE IF NOT EXISTS semantic_search_analytics (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  query_text text,
  search_time_ms integer,
  results_count integer,
  top_similarity_score float,
  created_at timestamp DEFAULT now()
);

-- DEPLOYMENT VERIFICATION QUERIES:
-- Check if vector extension is enabled:
-- SELECT * FROM pg_extension WHERE extname = 'vector';

-- Check if embedding column exists:
-- SELECT column_name FROM information_schema.columns 
-- WHERE table_name = 'osha_regulations' AND column_name = 'embedding';

-- Check index creation:
-- SELECT indexname FROM pg_indexes 
-- WHERE tablename = 'osha_regulations' AND indexname LIKE '%embedding%';