interface SafetyAnalysisReport {
  risk_level: string;
  overall_score: number;
  critical_issues: string[];
  recommendations: string[];
  compliance_status: string;
  action_items: string[];
  summary: string;
}

interface MultiModalAnalysisResult {
  overallRiskScore: number;
  blueprintAnalysis: {
    structuralHazards: string[];
    elevationRisks: string[];
    accessPoints: string[];
    safetyZones: string[];
    recommendations: string[];
  };
  visualPatternRecognition: {
    identifiedHazards: string[];
    equipmentDetected: string[];
    workerSafetyIssues: string[];
    environmentalFactors: string[];
  };
  integratedInsights: {
    criticalFindings: string[];
    complianceGaps: string[];
    immediateActions: string[];
    longTermRecommendations: string[];
  };
  insuranceRelevantData: {
    riskMitigationMeasures: string[];
    complianceScore: number;
    documentedSafetyPractices: string[];
    liabilityReduction: string[];
  };
}

export class ReportFormatter {
  static formatStandardSafetyReport(analysis: SafetyAnalysisReport, checklistTitle: string): string {
    const timestamp = new Date().toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    return `# Safety Compliance Report

**Checklist:** ${checklistTitle}  
**Date:** ${timestamp}  
**Risk Level:** ${analysis.risk_level.toUpperCase()}  
**Overall Score:** ${analysis.overall_score}/100

---

## Executive Summary

${analysis.summary}

## Risk Assessment

**Risk Level:** ${analysis.risk_level.toUpperCase()}  
**Compliance Status:** ${analysis.compliance_status}

${analysis.risk_level === 'high' ? '⚠️ **IMMEDIATE ATTENTION REQUIRED**' : 
  analysis.risk_level === 'medium' ? '⚡ **MODERATE RISK IDENTIFIED**' : 
  '✅ **LOW RISK - GOOD PRACTICES OBSERVED**'}

---

## Critical Issues ${analysis.critical_issues.length > 0 ? `(${analysis.critical_issues.length})` : ''}

${analysis.critical_issues.length > 0 ? 
  analysis.critical_issues.map((issue, index) => `${index + 1}. **${issue}**`).join('\n') :
  '*No critical issues identified.*'}

---

## Immediate Action Items

${analysis.action_items.length > 0 ?
  analysis.action_items.map((item, index) => `- [ ] ${item}`).join('\n') :
  '*No immediate actions required.*'}

---

## Safety Recommendations

${analysis.recommendations.map((rec, index) => `### ${index + 1}. ${rec.split('.')[0] || rec.substring(0, 50)}

${rec}

`).join('')}

---

## Report Details

- **Generated by:** Safety Companion AI
- **Analysis Type:** Standard Safety Assessment
- **Report ID:** SC-${Date.now().toString(36)}
- **Next Review:** ${new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString()}

---

*This report was generated using AI-powered safety analysis and should be reviewed by qualified safety personnel. For questions or clarifications, consult your safety manager.*`;
  }

  static formatMultiModalReport(analysis: MultiModalAnalysisResult, checklistTitle: string, blueprintCount: number, imageCount: number): string {
    const timestamp = new Date().toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    const riskLevel = analysis.overallRiskScore >= 80 ? 'HIGH' : 
                     analysis.overallRiskScore >= 60 ? 'MEDIUM' : 'LOW';
    
    const riskIcon = riskLevel === 'HIGH' ? '🔴' : 
                    riskLevel === 'MEDIUM' ? '🟡' : '🟢';

    return `# Comprehensive Multi-Modal Safety Analysis Report

**Project:** ${checklistTitle}  
**Date:** ${timestamp}  
**Analysis Type:** AI-Powered Multi-Modal Assessment  
**Risk Score:** ${analysis.overallRiskScore}/100 ${riskIcon}  
**Risk Level:** ${riskLevel}

---

## Analysis Overview

This comprehensive report combines AI analysis of:
- ✅ **Blueprint Analysis** (${blueprintCount} files)
- ✅ **Visual Recognition** (${imageCount} images)
- ✅ **Checklist Responses**
- ✅ **Railway System Integration**
- ✅ **Insurance Compliance Assessment**

---

## 🏗️ Blueprint Analysis Results

### Structural Hazards Identified
${analysis.blueprintAnalysis.structuralHazards.length > 0 ?
  analysis.blueprintAnalysis.structuralHazards.map(hazard => `- **${hazard}**`).join('\n') :
  '*No structural hazards identified in blueprints.*'}

### Elevation & Fall Risks
${analysis.blueprintAnalysis.elevationRisks.length > 0 ?
  analysis.blueprintAnalysis.elevationRisks.map(risk => `- ${risk}`).join('\n') :
  '*No significant elevation risks detected.*'}

### Access Points & Emergency Routes
${analysis.blueprintAnalysis.accessPoints.length > 0 ?
  analysis.blueprintAnalysis.accessPoints.map(point => `- ${point}`).join('\n') :
  '*Access points require review.*'}

### Safety Zones
${analysis.blueprintAnalysis.safetyZones.length > 0 ?
  analysis.blueprintAnalysis.safetyZones.map(zone => `- ${zone}`).join('\n') :
  '*Safety zones not clearly defined.*'}

---

## 📸 Visual Pattern Recognition

### Identified Hazards
${analysis.visualPatternRecognition.identifiedHazards.length > 0 ?
  analysis.visualPatternRecognition.identifiedHazards.map(hazard => `- ⚠️ **${hazard}**`).join('\n') :
  '*No visual hazards detected in uploaded images.*'}

### Equipment & PPE Analysis
${analysis.visualPatternRecognition.equipmentDetected.length > 0 ?
  analysis.visualPatternRecognition.equipmentDetected.map(equipment => `- ${equipment}`).join('\n') :
  '*Equipment detection analysis unavailable.*'}

### Worker Safety Issues
${analysis.visualPatternRecognition.workerSafetyIssues.length > 0 ?
  analysis.visualPatternRecognition.workerSafetyIssues.map(issue => `- 👷 **${issue}**`).join('\n') :
  '*No worker safety violations observed.*'}

### Environmental Factors
${analysis.visualPatternRecognition.environmentalFactors.length > 0 ?
  analysis.visualPatternRecognition.environmentalFactors.map(factor => `- 🌦️ ${factor}`).join('\n') :
  '*Environmental conditions appear acceptable.*'}

---

## 🎯 Critical Findings & Actions

### Immediate Actions Required
${analysis.integratedInsights.immediateActions.length > 0 ?
  analysis.integratedInsights.immediateActions.map((action, index) => `${index + 1}. **${action}**`).join('\n\n') :
  '*No immediate actions required.*'}

### Critical Findings
${analysis.integratedInsights.criticalFindings.length > 0 ?
  analysis.integratedInsights.criticalFindings.map(finding => `- 🔍 **${finding}**`).join('\n') :
  '*No critical findings identified.*'}

### Compliance Gaps
${analysis.integratedInsights.complianceGaps.length > 0 ?
  analysis.integratedInsights.complianceGaps.map(gap => `- 📋 ${gap}`).join('\n') :
  '*No significant compliance gaps identified.*'}

---

## 📈 Insurance & Risk Management

### Compliance Score: ${analysis.insuranceRelevantData.complianceScore}/100

### Risk Mitigation Measures
${analysis.insuranceRelevantData.riskMitigationMeasures.length > 0 ?
  analysis.insuranceRelevantData.riskMitigationMeasures.map(measure => `- ✅ ${measure}`).join('\n') :
  '*Additional risk mitigation measures recommended.*'}

### Documented Safety Practices
${analysis.insuranceRelevantData.documentedSafetyPractices.length > 0 ?
  analysis.insuranceRelevantData.documentedSafetyPractices.map(practice => `- 📝 ${practice}`).join('\n') :
  '*Safety documentation requires improvement.*'}

### Liability Reduction Opportunities
${analysis.insuranceRelevantData.liabilityReduction.length > 0 ?
  analysis.insuranceRelevantData.liabilityReduction.map(opportunity => `- 🛡️ ${opportunity}`).join('\n') :
  '*Continue current practices to maintain low liability.*'}

---

## 🔮 Long-Term Recommendations

${analysis.integratedInsights.longTermRecommendations.length > 0 ?
  analysis.integratedInsights.longTermRecommendations.map((rec, index) => `### ${index + 1}. ${rec.split(':')[0] || rec.substring(0, 40)}...

${rec}

`).join('') : '*No long-term recommendations at this time.*'}

---

## Blueprint Recommendations

${analysis.blueprintAnalysis.recommendations.length > 0 ?
  analysis.blueprintAnalysis.recommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n') :
  '*Blueprint analysis complete - no additional recommendations.*'}

---

## Report Summary

**Overall Assessment:** ${riskLevel} Risk Project  
**Compliance Score:** ${analysis.insuranceRelevantData.complianceScore}/100  
**Blueprint Files Analyzed:** ${blueprintCount}  
**Images Processed:** ${imageCount}  
**AI Confidence:** High (Multi-Modal Analysis)

### Next Steps
1. Review and address all immediate actions
2. Implement recommended safety measures
3. Schedule follow-up assessment in 30 days
4. Share report with insurance provider if applicable

---

## Report Details

- **Generated by:** Safety Companion AI (Multi-Modal)
- **Report ID:** SC-MM-${Date.now().toString(36)}
- **Analysis Engine:** Gemini AI + Pattern Recognition
- **Next Review:** ${new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString()}
- **Export Options:** PDF, Email, Database Storage

---

*This comprehensive report was generated using advanced AI analysis combining blueprint pattern recognition, visual hazard detection, and regulatory compliance assessment. This report is designed for insurance documentation and regulatory compliance. For technical questions, consult your project safety manager.*`;
  }

  static formatForEmail(report: string, subject: string): { subject: string; body: string } {
    return {
      subject: `Safety Report: ${subject} - ${new Date().toLocaleDateString()}`,
      body: `Dear Safety Team,

Please find the attached safety analysis report generated by our AI-powered Safety Companion system.

${report}

Best regards,
Safety Companion System

---
This is an automated report. Please do not reply to this email.`
    };
  }

  static formatForSharing(report: string): string {
    // Add sharing metadata and remove sensitive internal details
    const sharingHeader = `# Safety Analysis Report - Shared Copy

> **Shared on:** ${new Date().toLocaleDateString('en-US', { 
  year: 'numeric', 
  month: 'long', 
  day: 'numeric', 
  hour: '2-digit', 
  minute: '2-digit' 
})}  
> **Generated by:** Safety Companion AI  
> **Status:** Professional Safety Assessment

---

`;
    
    return sharingHeader + report;
  }

  static formatForDatabase(report: string, checklistId: string, userId: string): any {
    return {
      id: `report_${Date.now()}`,
      checklist_id: checklistId,
      user_id: userId,
      report_type: 'ai_analysis',
      content: report,
      formatted_content: report, // Already in markdown
      generated_at: new Date().toISOString(),
      status: 'active',
      sharing_enabled: true,
      export_formats: ['pdf', 'email', 'markdown'],
      metadata: {
        word_count: report.split(' ').length,
        has_critical_issues: report.includes('CRITICAL') || report.includes('HIGH'),
        compliance_ready: true,
        insurance_compatible: true
      }
    };
  }
}